name: Deploy Spring Boot Application

# 트리거 설정 - 언제 워크플로우가 실행될지 정의
on:
  push:
    branches: [ main, master ]  # main 또는 master 브랜치에 푸시될 때
  pull_request:
    branches: [ main ]          # main으로 PR이 생성될 때

jobs:
  deploy:
    runs-on: ubuntu-latest      # GitHub에서 제공하는 우분투 가상머신 사용

    steps:
    # 1단계: 코드 체크아웃
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    # 2단계: JDK 21 환경 설정
    - name: JDK 21 설정
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'  # Eclipse Adoptium의 OpenJDK
        cache: maven             # Maven 의존성 캐싱으로 빌드 속도 향상
    
    # 3단계: Maven 권한 설정 (필요시)
    - name: Maven Wrapper 실행 권한 부여
      run: chmod +x mvnw

    # 4단계: 애플리케이션 빌드 및 테스트
    - name: Maven 빌드 및 테스트
      run: |
        ./mvnw clean compile test package -DskipTests=false

    # 5단계: 테스트 결과 업로드 (선택사항)
    - name: 테스트 결과 발행
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    # 6단계: Docker 이미지 빌드
    - name: Docker 이미지 빌드
      run: |
        docker build -t myapp:latest .
        docker tag myapp:latest ${{ secrets.DOCKER_REGISTRY }}/myapp:latest

    # 7단계: Docker Hub에 푸시
    - name: Docker Hub 로그인 및 푸시
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKER_REGISTRY }}/myapp:latest

    # 8단계: 서버 배포
    - name: 서버에 배포
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_REGISTRY }}/myapp:latest
          docker stop old-container || true
          docker rm old-container || true
          docker run -d --name new-container -p 8080:8080 ${{ secrets.DOCKER_REGISTRY }}/myapp:latest

          

