name: Spring Boot CI/CD to EC2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'corretto'

jobs:
  # 1단계: 코드 빌드 및 테스트
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: ./mvnw test
      
    - name: Build JAR file
      run: ./mvnw clean package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar
        retention-days: 1

  # 2단계: EC2에 배포 (main 브랜치만)
  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      run: |
        # JAR 파일을 EC2로 복사
        scp -i ~/.ssh/id_rsa *.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/
        
        # EC2에서 배포 스크립트 실행
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # 기존 프로세스 종료
          sudo pkill -f 'java -jar' || true
          
          # 새 애플리케이션 시작
          nohup java -jar ~/your-app-*.jar --spring.profiles.active=prod > ~/app.log 2>&1 &
          
          # 애플리케이션 시작 대기
          sleep 10
          
          # 헬스체크
          if curl -f http://localhost:8080/actuator/health; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            exit 1
          fi
        EOF
